//
//  ViewController.swift
//  RPS Test
//
//  Created by Anand Nigam on 01/04/18.
//  Copyright Â© 2018 Anand Nigam. All rights reserved.
//

//In this app, firstly in order to design the UI, we need to make three buttons for users choice and a button to reset the game, a label to display the logo of the game and another one to display the name of the game and later the result of the game in the same label, first put three buttons in a stack view and then all of the things in a single stack view and apply the appropriate constraints to make the UI work on every type of screen
//next we will connect all the labels and buttons through actions and outlets in order to show the change in the UI , according to the user interaction
//next we make a different file for the different states of the game, lose,win,draw or restart
//next a new file is made in order to generate the choice of the computer and then declare the result by evaluating the choices made by user and the decision generated by the computer and announcing the result on the defined parameter of the game and return the defined result
//next we need to update the UI according to the result and display it to the user and also manage the code according to the selection of the user and perform various tasks like changing background accordingly and changing the states of the button after the selection and changing the label to display the result according to the state of  the game.





import UIKit

class ViewController: UIViewController {
    
    @IBOutlet weak var gameLogo: UILabel!
    @IBOutlet weak var gameTitle: UILabel!
    @IBOutlet weak var rockOption: UIButton!
    @IBOutlet weak var paperOption: UIButton!
    @IBOutlet weak var scissorOption: UIButton!
    @IBOutlet weak var playAgainTitle: UIButton!
    
    
    // func to perform the operations when the button is pressed in the UI
    @IBAction func rockButton(_ sender: UIButton) {
        gameLogo.text = Sign.rock.emoji
        updateUI(result(.rock))
        updateButton(.rock)
        
    }
    @IBAction func paperButton(_ sender: UIButton) {
        gameLogo.text = Sign.paper.emoji
        updateUI(result(.paper))
        updateButton(.paper)
        
    }
    @IBAction func scissorButton(_ sender: UIButton) {
        gameLogo.text = Sign.scissor.emoji
        updateUI(result(.scissor))
        updateButton(.scissor)
    }
    @IBAction func playAgainButton(_ sender: UIButton) {
       
       updateUI(.Start)
       
    }
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // to update the UI to a specific state of the game when the view is loaded
        updateUI(.Start)
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    
    // method to update the UI according to the state of the game
    //to update the title, declaring result and changing the color of background according to the decision
    func updateUI(_ gameStatus: GameState) {
        if gameStatus == .Win{
            gameTitle.text = "You Won"
            view.backgroundColor = UIColor.green
            
        }
        else if gameStatus == .Draw {
            gameTitle.text = "Its a draw"
            view.backgroundColor = UIColor.yellow
        }
        else if gameStatus == .Lose {
            gameTitle.text = "You Lose"
            view.backgroundColor = UIColor.red
        }
        else {
            gameTitle.text = "Rock , Paper & Scissors"
            gameLogo.text = "ðŸ¤–"
            view.backgroundColor = UIColor.darkGray
            paperOption.isEnabled = true
            paperOption.isHidden = false
            scissorOption.isEnabled = true
            scissorOption.isHidden = false
            rockOption.isEnabled = true
            rockOption.isHidden = false
            playAgainTitle.isEnabled = false
        }
    }
    
    
    // method to hide and disable the other buttons when one is selected by the user
    func updateButton(_ selectedSign: Sign ) {
        if selectedSign == .rock {
          paperOption.isEnabled = false
            paperOption.isHidden = true
            scissorOption.isEnabled = false
            scissorOption.isHidden = true
            playAgainTitle.isEnabled = true
        }
        else if selectedSign == .paper {
            scissorOption.isEnabled = false
            scissorOption.isHidden = true
            rockOption.isEnabled = false
            rockOption.isHidden = true
            playAgainTitle.isEnabled = true
        }
        else  {
            paperOption.isEnabled = false
            paperOption.isHidden = true
            rockOption.isEnabled = false
            rockOption.isHidden = true
            playAgainTitle.isEnabled = true
        }
    }

}

